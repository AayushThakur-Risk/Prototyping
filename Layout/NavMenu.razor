@page "/navmenu"
@using MyBlazorWasmApp.Models
@using static System.Net.WebRequestMethods
@inject HttpClient Http

@* Add Dynamic Domain *@
@* <DomainMenuManage MenuItems="@MenuItems" OnMenuItemsChanged="UpdateMenuItems" /> *@

@*
<div class="nav-label">
    Navigations
</div>
<div class="nav-item px-3 ">
    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
        <span class="bi bi-xbox bi-icon" aria-hidden="true"></span> Dashboard
    </NavLink>
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="weather">
        <span class="bi bi-browser-edge bi-icon" aria-hidden="true"></span> WebSites
    </NavLink>
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="weather">
        <span class="bi bi-activity bi-icon" aria-hidden="true"></span> Activities
    </NavLink>
</div>
<div class="nav-label">
    Ai Features
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="notifier">
        <span class="bi bi-unity bi-icon" aria-hidden="true"></span> Ai Analysis
    </NavLink>
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="notifier">
        <span class="bi bi-steam bi-icon" aria-hidden="true"></span> Auto Monitoring
    </NavLink>
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="notifier">
        <span class="bi bi-search" aria-hidden="true"></span> URL Discovery
    </NavLink>
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="notifier">
        <span class="bi bi-stack bi-icon" aria-hidden="true"></span> Advanced Tools
    </NavLink>
</div> *@
@* <div class="nav-item px-3">
    <NavLink class="nav-link" href="courtSearch">
        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Court Search
    </NavLink>
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="notification">
        <span class="bi bi-bell-fill" aria-hidden="true"></span> Notification
    </NavLink>
</div> 
<div class="nav-item px-3">
    <NavLink class="nav-link" href="urlchangenotifier">
        <span class="bi bi-bell-fill" aria-hidden="true"></span> Change Notifier
    </NavLink>
</div>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="searchChat">
        <span class="bi bi-search" aria-hidden="true"></span> Search
    </NavLink>
</div>
    using System.Runtime.CompilerServices;
<div class="nav-item px-3">
    <NavLink class="nav-link" href="notifier">
        <span class="bi bi-bell-fill" aria-hidden="true"></span> Notifier
    </NavLink>
</div> *@

@foreach (var item in MenuItems)
{
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="@item.Url">
            <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @item.Title
        </NavLink>

        @if (item.SubMenus?.Any() == true)
        {
            <div class="sub-menu">
                @foreach (var subMenu in item.SubMenus)
                {
                    <NavLink class="nav-link" href="@subMenu?.Url">
                        <span class="@subMenu?.Icon" aria-hidden="true"></span> @subMenu?.Title
                    </NavLink>
                }
            </div>
        }
    </div>
}

<div class="nav-item px-3">
    <NavLink class="nav-link">
        <span class="side-head-label">Court Monitor</span> 
    </NavLink>
</div>
@foreach (var data in menuDataList)
{
    @if (data.Menus?.Any() == true)
    {
        <div class="nav-label">
            @data?.NavLabel
        </div>
        @* <div class="sub-menu"> *@
            @foreach (var menu in data?.Menus)
            {
                <div class="nav-item px-3 ">
                    <NavLink class="nav-link" href="@menu?.Url" Match="NavLinkMatch.All">
                        <span class="@menu?.Icon" aria-hidden="true"></span> @menu?.Title
                    </NavLink>
                </div>
            }
        @* </div> *@
    }
}

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private bool isModalVisible = false;
    private List<MenuItem> MenuItems { get; set; } = new List<MenuItem>();
    private MenuItem? selectedMenuItem;
    private void ShowAddMenuModal()
    {
        selectedMenuItem = null;  // No menu selected for Add
        isModalVisible = true;
    }

    private void ShowEditMenuModal(MenuItem menu)
    {
        selectedMenuItem = menu;
        isModalVisible = true;
    }

    private void ShowDeleteMenuModal(MenuItem menu)
    {
        selectedMenuItem = menu;
        isModalVisible = true;
    }

    private void AddNewMenu(MenuItem newMenu)
    {
        MenuItems.Add(newMenu);
        @* CloseModal(); *@
    }

    private void EditMenu(MenuItem editedMenu)
    {
        var existingMenu = MenuItems.FirstOrDefault(m => m.Id == editedMenu.Id);
        if (existingMenu != null)
        {
            existingMenu.Title = editedMenu.Title;
            existingMenu.Url = editedMenu.Url;
        }
        CloseModal();
    }

    private void DeleteMenu(MenuItem menu)
    {
        MenuItems.RemoveAll(m => m.Id == menu.Id);
        CloseModal();
    }

    private void CloseModal()
    {
        isModalVisible = false;
        selectedMenuItem = null;
    }

    private void UpdateMenuItems(List<MenuItem> updatedMenuItems)
    {
        MenuItems = updatedMenuItems;
        StateHasChanged();
    }

    // Load the initial data asynchronously
    private List<MenuConfig> menuDataList = new List<MenuConfig>();
    protected override async Task OnInitializedAsync()
    {
        menuDataList = await Http.GetFromJsonAsync<List<MenuConfig>>("sample-data/side-menu-data.json");
    }
}
